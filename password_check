#!/usr/bin/env bash

# Define colors and formatting variables
declare -A colors=(
  [red]=$'\e[1;31m' [green]=$'\e[1;32m' [blue]=$'\e[1;34m' [magenta]=$'\e[1;35m'
  [cyan]=$'\e[1;36m' [bold]=$'\e[1m' [undline]=$'\e[4m' [r]=$'\e[0m'
)

# Inform the user about the scoring system
echo -e "You will be scored on a ${colors[green]} ${colors[bold]}( 1 - 10 )${colors[r]} system ${colors[red]} 1=AWFUL, ${colors[blue]} 5=OK, ${colors[cyan]} 10=AWESOME ${colors[r]}"

# Read password from the user
echo -e "${colors[magenta]} Your Password ${colors[red]} WILL NOT ${colors[r]} ${colors[magenta]} be shown when typing it ${colors[r]}"
read -sp "Enter your super secret password: " password; echo

# Update the wordlist path with the most recent version of SecLists or other comprehensive lists
wordlist="/usr/share/seclists/Passwords/FullPasswordList.txt"
if grep -qxm 1 "^$password$" "$wordlist"; then
  echo -e "${colors[red]}[Password Found] ----- [WARNING] ------ [Password Found] ${colors[r]}"
  echo -e "${colors[red]} Your password was found in a well-known password file used by hackers. It is vital you change this password if you are using it! ${colors[r]}"
  echo -e "Final score is ${colors[red]} 0 ${colors[r]}"
  exit 0
fi

# Define a function to check if a substring is a dictionary word
check_dictionary_word() {
  local word=$1
  response=$(curl -s "https://api.dictionaryapi.dev/api/v2/entries/en/$word")
  if echo "$response" | grep -q '"title": "No Definitions Found"'; then
    return 1 # Word not found in dictionary
  else
    return 0 # Word found in dictionary
  fi
}

# Define a function to handle common substitutions
apply_substitutions() {
  local word=$1
  word=$(echo "$word" | tr '0135@!$' 'OISEAILS')
  echo "$word"
}

# Main function to check the password for dictionary words
check_password() {
  local password=$1
  local len=${#password}
  local min_sub_len=3
  local max_sub_len=6
  local word

  for ((i = 0; i <= len - min_sub_len; i++)); do
    for ((j = min_sub_len; j <= max_sub_len && i + j <= len; j++)); do
      word=${password:i:j}
      word=$(apply_substitutions "$word")
      if check_dictionary_word "$word"; then
        echo -e "${colors[red]} The password contains a dictionary word or a common substitution: $word ${colors[r]}"
        return 0
      fi
    done
  done

  echo "The password does not contain any obvious dictionary words."
  return 1
}

# Initialize password score and feedback
score=0
feedback=""

# Check length of the password and assign initial score
length=${#password}
if (( length >= 8 && length <= 10 )); then
  ((score+=2))
  feedback+="Password length is sufficient ${colors[green]} [+2] ${colors[r]}.\n"
elif (( length >= 11 && length <= 18 )); then
  ((score+=4))
  feedback+="Password length is good ${colors[green]} [+4] ${colors[r]}.\n"
elif (( length > 19 )); then
  ((score+=6))
  feedback+="Password length is excellent ${colors[green]} [+6] ${colors[r]}.\n"
else
  feedback+="Password is too short ${colors[red]} [0] ${colors[r]}.\n"
fi

# Check for presence of different character types
[[ "$password" =~ [a-z] ]] && ((score+=1))
feedback+="for using a lower case letter. ${colors[green]} [+1] ${colors[r]}  \n"
[[ "$password" =~ [A-Z] ]] && ((score+=1))
feedback+="for using a upper case letter. ${colors[green]} [+1] ${colors[r]} \n"
[[ "$password" =~ [0-9] ]] && ((score+=1))
feedback+="for using a number value. ${colors[green]} [+1] ${colors[r]} \n"
[[ "$password" =~ [\!\@\#\$\%\^\&\*\(\)\_\+\-\=\{\}\[\]\:\;\"\'\<\>\,\.\?\/\~\`] ]] && ((score+=2))
feedback+="for using a special caracter. ${colors[green]} [+1] ${colors[r]} "

# Deduct points for common substitutions and patterns
[[ "$password" =~ [oO] && "$password" =~ [0] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '0' for 'O' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [iI] && "$password" =~ [1] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '1' for 'I' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [aA] && "$password" =~ [@] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '@' for 'A' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [sS] && "$password" =~ [\$] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '$' for 'S' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [eE] && "$password" =~ [3] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '3' for 'E' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [lL] && "$password" =~ [1] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '1' for 'l' ${colors[red]} [-1] ${colors[r]}.\n"
[[ "$password" =~ [tT] && "$password" =~ [7] ]] && ((score-=1)) && feedback+="Avoid common substitutions like '7' for 'T' ${colors[red]} [-1] ${colors[r]}.\n"

# Ensure the score does not exceed the maximum of 10
(( score > 10 )) && score=10

# Ensure the score does not go below 1
(( score < 1 )) && score=1

# Provide feedback if the score is less than 10
if (( score < 10 )); then
  echo -e "${colors[cyan]} ${colors[bold]} Suggestions to improve your password strength: ${colors[r]}"
  echo -e "$feedback"
else
  echo -e "${colors[green]} Your password is AWESOME! ${colors[r]}"
fi

# Output the password strength score
echo -e "Password final strength score is: ${colors[bold]} $score ${colors[r]}"
(( score >= 2 && score <= 4 )) && echo -e "${colors[magenta]} You get a D"
(( score >= 5 && score <= 6 )) && echo -e "${colors[cyan]} You get a C"
(( score >= 7 && score <= 8 )) && echo -e "${colors[blue]} You get a B"
(( score >= 9 && score <= 10 )) && echo -e "${colors[green]} You get an A"
(( score < 2 )) && echo -e "${colors[red]} You failed, there is a good chance hackers have compromised you already."

# Ensure the script exits with status 0
exit 0
